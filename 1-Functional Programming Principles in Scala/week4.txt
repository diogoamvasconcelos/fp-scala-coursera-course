--- Types and Pattern Matching ---

    -- Pure Object Orientation --
        . every value is an Object (of a type Class)
            . scala is a POO!! (event the primitive types are objects!) 
            . primitive types are objects....functions are objects
                . Compiler will replace by Java primitives, but this is an optmization

    
    -- Functions as Objects --
        . function types are treated as Objects in Scala (object with 'apply' methods)

            function type A => B is an abbreviation for the class scala.Function1[A, B], which is defined as:
                trait Function1[A, B] {
                    def apply(x: A): B
                }

        . Function Values
            e.g: anonymous functions get expanded to a function object and then a instanciation ('new') of the class
                (x: Int) => x * x
                - becomes
                    { class AnonFun extends Function1[Int, Int] {
                        def apply(x:Int) = x * x
                        }
                       new AnonFun
                    }
                - can also be written combining 'new' and 'class'
                new Function1[Int, Int] { 
                    def apply(x: Int) = x * x
                }

        Note: 'methods' definitions are not function values, but if used in a place where a function type is expected, it gets converted to a function value (an thus to an object)


--- Polymorphism ---
    Interaction between Subtyping and Generics

    -- Type Bounds --
        . motivating e.g:
            method 'assertAllPos'
                . takes an InsSet
                . return the IntSet itself if all elements are positive
                . throws expection otherwise
            
            .What is the best type to give 'assertAllPos'?
                def assertAllPos[S <: IntSet](r: S): S = ...

                    "<: IntSet" is an upperBound of the type parameter S
                        . S can only be instantiated to types that conform to IntSet (like Empty and NonEmpty classes that extend IntSet)
        
            - S <: T  , means S is a subtype of T
            - S >: T  , means S is a supertype of T (or T is a subtype of S)

                    "[S >: NonEmpty]" this is an lower bound where S can only range on the supertypes of NonEmpty (NonEmpty, IntSet, AnyRef, Any)


                    both bounds [S >: NonEmpty <: IntSet]  can be combined


        . Covariance
            . types are called 'Covariant' if their Subtyping relationship varies with the type parameter.
                e.g: given NonEmpty <: IntSet
                     then   List[NonEmpty] <: List[InsSet]
                     . 'List' is a Covariant type (not all types are Covariant) 

        When does a type can be a subtype of another?
        -- Liskov Substitution Principle, LSP --
            . if A <: B then everything one can do to with value of type B one should also be able to do with value of type A

            e.g:
                val a: Array[NonEmpty] = Array(new NonEmpty(1, Empty, Empty))
                val b: Array[IntSet] = a    <---- type ERROR
                    . error because in Scala, Arrays are NOT Covariant, so there is no subtype relationship

                    this is done to avoid the following problem:
                    b(0) = Empty
                    val s: NonEmpty = a(0)    ....cabommm 


            The type 'Array' should not be covariant because it is mutable (can update its values), so to avoid type changes it cant be covariant

            The type 'List' which is immutable, can and should be covariant!!

        -- Variance --
            When can types be Covariant?

            - Types of Variance -
                . C[T] is a parameterized type and A,B are types where A <: B

                Possible relationships between C[A] and C[B]

                    C[A] <: C[B]       C is Covariant

                    C[A] >: C[B]       C is Contravariant
                    
                    neither C[A] or C[B] is subtype of the other  C is Nonvariant


            In Scala you can declare the variance!
                class C[+A] {...}   C is Covariant
                class C[-A] {...}   C is Contravariant
                class C[A]  {...}   C is Nonvariant

                Generalzing to Function Types
                    if A1 <: A2 and B1 <: B2 then

                    A2 => B1    <:  A1 => B2            , return is subtype but arguments are the related in the opposite direction

                ->> Functions are:
                    . Contravariant in the argument types
                    . Covariant in the result types

                    Scala Compiler will only let:
                        . 'covariant' type (+) parameters can only appear in method results
                        . 'contravariant' type (-) parameters can only appear in method arguments
                        . invariant types parameters can appear anywhere 

                    -> This Rules exist to prevent mutability issues, but causes some side effects where immutable operations become illegal.
                        This is solved with upper/lower bounds

                        . covariant type parameters may appear in lower bounds of method type parameters
                            .e.g:  def prepend[U >: T] (elem: U) : List[U] = ...  (where T is List[+T])

                        . contravariant type parameters may appear in upper bounds of method type parameters

                

    --- Decomposition ---
        . running example:
            ->> small interpreter for arithmetic expressions
                base Trair Expr and two subclasses Number and Sum

                . need to know of each expressions element their type... if it is a Number or a Sum

                trait Expr
                {
                    //classificators
                    def isSum: Boolean
                    def isNumber: Boolean
                    //accessors
                    def numValue: Int
                    def leftOp: Expr
                    def rightOp: Expr
                }

                writting all of these classificators and accessor functions is TEDIUOS!!
                    . if you want to expand the Expr subclasses with more subtypes, like Prod, Var, etc....you need to add all their functions to the base trair Expr.....=sss
                    . quadratic increase of methods!!

                Solutions:
                    -1) Previous solution with Classification and access methods
                        . quadratic explosion of methods

                    0) Hacky....DONT USE
                        . type test and type cast! (java isInstaceOf[T]: Boolean and asInstanceOf[T]: T])
                        . use is discoureged!! there are better alternatives!! (not safe...hacky..done at runtime...bad desing)

                    1) Object-Oriented Decomposition
                        as all we want from and Expr is its evaluation value we could write:

                        trait Expr
                        {
                            def eval: Int
                        }

                        class Number(n: Int) extends Expr
                        {
                            def eval: Int = n
                        }
                        ...

                        . limitation: methods that envolve knowing the type (non-local methods, that envolve the multiple instances of the objects / data structure) wouldnt work as we cant have them encapsulated in the methods of a single object
                            e.g: simplify expressions: a * b + a * c -> a * (b + c)

                        . doest not always work
                        . also to add a new method, it needs to be added to all classes individually (could be a lot of work..)


                    2) -- Pattern Matching --
                        . functional decomposition using pattern matching
                        
                        in the example:
                            the purpose of test and accessor functions is to reverse the construction process
                                . which subclass was used? what were the arguments of the constructor??

                            . This is very common so like in many functional languages, Scala automates it!!!
                                -> 'case' classes

                            trair Expr
                            case class Number(n: Int) extends Expr

                            . the Scala compiler will add companion objects with 'apply' methods
                            
                                Object Number
                                {
                                    def apply(n: Int) = new Number(n) //factory method for the ()
                                }

                                so you can write Number(1) instead o 'new Number(1)' -> synthax convience

                            ->> Patter Matching is a generalization of the C 'switch'

                                def eval(e: Expr): Int = e match
                                {
                                    case Number(n) => n                      //pattern 
                                    case Sum(e1, e2) => eval(e1) + eval(e2)  //other pattern
                                }

                                . first pattern that matches will be used
                                . if no matching pattern, exception is thrown

                                - Patterns:
                                    . constructors, eg: Number, Sum
                                    . variables, e.g: n, e1  (must always begin with lower case)
                                    . wildcard patterns _
                                    . constants, e.g: 1, true , n (if N is a val, thus a constant..constants should begin with Capital letter)

                                    complex pattern example: Sum( Number(1), Var(X)) => .....

                                    subtypes of a type in a 'case' can also be matched


    --- Collections - Immutable Collections ---

        -- Lists --
            . are immutable
            . are recursvie (while arrays are flat)

        -the scala std lib Lists implementation is very similar to the one done in week 3 (but with more functionality)

        -lists can be contructed as:
            empty list (Nil) and the construction operator :: (new_head :: curr_list)
            e.g: nums = 1 :: (2 :: (3 :: Nill))  
                because operators ending with ":" associate to the right no need to use the parenthisis!
                also, they are seen as method calls of the right-hand operand (where the default is to the left-hand operand)

        -all operations on lists can be expressed in terms of these 3 operations: head, tail, isEmpty

        -possible to decompose lists with pattern matching
            .eg:
                1::2::xs  will match lists that start with 1 and then 2

            - append List to List -> :::
                ws = ys ::: xs


        



            






                                






                            

                        

                    

                    

                    












    

            







        

        