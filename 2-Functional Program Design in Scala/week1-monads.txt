--- Monads ---
    . Data structure with 'map' and 'flatMap'
    . fundamental block of many design patterns used in FP

    . Is a parametric type[T] with 2 operations: 'bind' (the flatMap) and 'unit'

        trait M[T]{
            def flatMap[U](f:T => M[U]): M[U]  //converts a monad of T to a monad of U
        }

        def unit[T](x: T): M[T]   //takes x of type T and returns instance of monad of T

    - Examples of Monads -
        . List is a monad with unit(x) = List(x)
        . Set is a monad with unit(x) = Set(X)
        . Option is a monad with unit(x) = Some(X)   //used for the 'map collection' get element
        . Generator is a monad with unit(x) = single(X)

            -> 'unit' is not defined as a singular method. Instead it has different values depending on the type (as seen above)

    - Express 'map' as combo of 'flatMap' and 'unit'
        m map f == m flatMap(x => unit(f(x)))


    -- Monad Laws --
        . Monad needs to satisfy 3 laws that relate 'flatMap' to 'unit'

        - Associativity:
            m flatMap f flatMap g == m flatMap (x => f(x) flatMap g)

            -> this laws allows "inlining" of nested for-expressions!
                e.g: inlining generators
                    for (y <- for (x <- m; y <- f(x)) yield y
                    ==
                    for (x <- m
                        y <- f(x)) yield y
 

        - Left unit:
            . binding the unit of x with f is the same as just appling f to x
            
            unit(x) flatMap f == f(x)

            -> not useful for simplifing for-expressions..=S

        - Right unit:
            . "injecting" unit into a monad results in the same monad
            
            m flatMap unit == m

            -> nice for simplifing for-expressions:
                for (x <- m) yield x
                ==
                m




    