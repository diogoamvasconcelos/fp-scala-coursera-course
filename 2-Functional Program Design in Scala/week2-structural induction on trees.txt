--- Structural Induction on Trees ---

    . continuation of Structural Induction on Lists (course 1, week 5)
    . using FP (and the fact that it is very close to pure mathematical formulations) to prove mathematical principals

    . Prove property P(t) holds for all trees 't' of a certain type
        - show that P(l) hold for all 'l' leaves of a trees
        - for each type of internal node 't' with subtrees s1,...,sn show that:
            all P(s1, ..., sn) holds as well

    - IntSets -
        abstract class IntSet {
            def incl(x: Int): IntSet
            def contains(x: Int): Boolean
            def union(other: IntSet): IntSet
        }

        object Empty extends IntSet {
            def contains(x: Int): Boolean = false
            def incl(x: Int): IntSet = NonEmpty(x, Empty, Empty)
            def union(other: IntSet): other
        }

        case class NonEmpty(elem: Int, left: IntSet, right: IntSet) extends IntSet{
            def contains(x: Int): Boolean = 
                if (x < elem) left contains x
                else if (x > elem) right contains x
                else true

            def incl(x: Int): IntSet =
                if (x < elem) NonEmpty(elem, left incl x, right)
                else if (x > elem) NonEmpty(elem, left, right incl x)
                else this

            def union(other: IntSet): = (l union (r union (other))) incl x   //more efficient then: ((l union r) union other) incl x
        }

        -> Prove the correctness of this implementation
            . to prove we should define some laws that the implemntation should satisfy, and then prove it does

            . 3 laws:
                1: Empty contains x = false
                2: (s incl x ) contains x = true
                3: (s incl x ) contains y = s contains y    //if x != y

            
            -> Proving Law 1
                . direct consequence of the definition of 'contains' in Empty!, easy to prove

            -> Proving Law 2
                . proof by strutural inducion on 's'

                    - base case: Empty
                        (Empty incl x) contains x 
                        == NonEmpty(x, Empty, Empty, contains x) //by definition of Empty.incl
                        == true     // by definition of NonEmpty.contains


                    - induction step: NonEmpty(y, l, r)
                        (NonEmpty(y,l,r) incl x) contains x 
                        == NonEmpty(y, l, r incl x) contains x //by definition of NonEmpty.incl   , if y < x
                        == (r incl x) contains x //by definition of NonEmpty.contains
                        == true //by induction hypothesis, all should hold

            -> Proving Law 3
                    - base case: Empty
                        (Empty incl y) contains x 
                        == NonEmpty(y, Empty, Empty, contains x) 
                        == Empty contains x //by definition of NonEmpty.contains, recursive call on the branches (Empty)
                        => concludes the propsition. it equals the proposition right side

                    - induction step: NonEmpty(z, l, r)
                         5 diferent cases to consider...
                            1. z = x
                            2. z = y
                            3. z < y < x
                            4. y < z < x
                            5. y < x < z

                            it can be proven for all, nice (see 2.1 lecture video)                     



